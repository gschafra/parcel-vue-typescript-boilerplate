{
    "extends": [
        "rxjs-tslint-rules"
    ],
    "linterOptions": {
        "exclude": [
            "**/*.json",
            "**/polyfills.*",
            "**/setup-jest.ts"
        ]
    },
    "rulesDirectory": [
        "node_modules/tslint-microsoft-contrib",
        "node_modules/vrsource-tslint-rules/rules"
    ],
    "rules": {
        /***********************************************************
         *                                                         *
         *           These rules require maintenance               *
         *                                                         *
         ***********************************************************/

        // Bans imports that should be made more specific. This helps reduce final build size (and thus loading speed).
        // May need to be altered on future versions
        // https://palantir.github.io/tslint/rules/import-blacklist/
        "import-blacklist": [
            true,
            "rxjs/Rx",
            "primeng/primeng"
        ],
        // Bans console methods that should not be used in production code.
        // https://palantir.github.io/tslint/rules/no-console/
        "no-console": [
            true,
            "debug",
            "info",
            "time",
            "timeEnd",
            "trace"
        ],
        /***********************************************************
         *                                                         *
         *               Whitespace & File Style                   *
         *                                                         *
         ***********************************************************/

        // Enforces consistent use of unix style line breaks
        // https://palantir.github.io/tslint/rules/linebreak-style
        "linebreak-style": [
            true,
            "LF"
        ],
        // Enforces usage of tabs
        // https://palantir.github.io/tslint/rules/indent
        "indent": [
            true,
            "tabs",
            2
        ],
        // Enforces vertical alignment of various elements, especially for multi-line argument or parameter lists.
        // https://palantir.github.io/tslint/rules/align
        "align": [
            true,
            // "arguments",
            "elements",
            "members",
            // "parameters",
            "statements"
        ],
        // Bans trailing whitespaces in code
        // https://palantir.github.io/tslint/rules/no-trailing-whitespace
        "no-trailing-whitespace": [
            true,
            "ignore-comments",
            "ignore-blank-lines"
        ],
        // Enforces consistent utf-8 encoding
        // https://palantir.github.io/tslint/rules/encoding
        "encoding": true,
        // Ensures the file ends with a newline.
        // https://palantir.github.io/tslint/rules/eofline/
        "eofline": true,
        // @tslint-microsoft-contrib
        "no-empty-line-after-opening-brace": true,
        // Ensures no files that are entirely commented out, empty or only containing whitespace are left behind.
        // @tslint-microsoft-contrib
        "no-useless-files": true,
        /***********************************************************
         *                                                         *
         *                       Code Style                        *
         *                                                         *
         ***********************************************************/

        // Enforces explicit visibility rules
        // https://palantir.github.io/tslint/rules/member-access
        "member-access": [
            true,
            "check-constructor",
            "check-parameter-property"
        ],
        // Enforces usage of T[] instead of Array<T>.
        // https://palantir.github.io/tslint/rules/array-type
        "array-type": [
            true,
            "array"
        ],
        // Enforces parenthesis on arrow functions like "(a, b) => a - b"
        // but forbids them on single argument arrow functions like "a => a > 0"
        // https://palantir.github.io/tslint/rules/arrow-parens
        "arrow-parens": [
            false
        ],
        // Enforces statements like "() => {return 0;}" to be written as "() => 0" instead
        // https://palantir.github.io/tslint/rules/arrow-return-shorthand
        "arrow-return-shorthand": [
            true,
            "multiline"
        ],
        // Enforces ordering of binary operands to be "x + 1" and not "1 + x"
        // https://palantir.github.io/tslint/rules/binary-expression-operand-order
        "binary-expression-operand-order": false,
        // Bans declaration of jsdoc comments with rules that the typescript code already enforces anyway.
        // https://palantir.github.io/tslint/rules/no-redundant-jsdoc
        "no-redundant-jsdoc": true,
        // Bans declarations like 'let x, y;', use one statement per declaration instead.
        // https://palantir.github.io/tslint/rules/one-variable-per-declaration
        "one-variable-per-declaration": [
            true,
            "ignore-for-loop"
        ],
        // Bans these types from being declared. This does not prevent usage of the Object, String or Number globals.
        // https://palantir.github.io/tslint/rules/ban-types
        "ban-types": [
            true, [
                "Object",
                "Use '{}' instead."
            ],
            [
                "String",
                "Use 'string' instead."
            ],
            [
                "Number",
                "Use 'number' instead."
            ]
        ],
        // Enforces function overloads to be consecutive.
        // https://palantir.github.io/tslint/rules/adjacent-overload-signatures
        "adjacent-overload-signatures": true,
        // Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter.
        // https://palantir.github.io/tslint/rules/unified-signatures/
        "unified-signatures": true,
        // Bans disabling of typescript compiler semantic analysis
        // https://palantir.github.io/tslint/rules/ban-ts-ignore
        "ban-ts-ignore": true,
        // Forbids empty interfaces
        // https://palantir.github.io/tslint/rules/no-empty-interface
        "no-empty-interface": true,
        // Bans import side effects as they don't work well with static analysis
        // https://palantir.github.io/tslint/rules/no-import-side-effect/
        "no-import-side-effect": true,
        // Disallows <reference path=> imports (use ES6-style imports instead).
        // https://palantir.github.io/tslint/rules/no-reference
        "no-reference": true,
        // Outdated, use "import foo = require('foo')" instead.
        // https://palantir.github.io/tslint/rules/no-var-requires/
        "no-var-requires": true,
        // Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean.
        // Explicit types where they can be easily inferred by the compiler make code more verbose.
        // https://palantir.github.io/tslint/rules/no-inferrable-types
        "no-inferrable-types": [
            true,
            "ignore-params",
            "ignore-properties"
        ],
        // Disallows use of internal module or namespaces, ES6-style external modules are the standard way to modularize code.
        // Using module {} and namespace {} are outdated ways to organize TypeScript code.
        // https://palantir.github.io/tslint/rules/no-namespace/
        "no-namespace": [
            true,
            "allow-declarations"
        ],
        // Enforces type declarations on function signature and interface members
        // https://palantir.github.io/tslint/rules/typedef/
        "typedef": [
            true,
            "parameter",
            "property-declaration",
            "member-variable-declaration",
            "object-destructuring",
            "array-destructuring"
        ],
        // Ban ts directive comments, these should never be necessary in a typescript codebase
        // https://palantir.github.io/tslint/rules/comment-type
        "comment-type": [
            true,
            "doc",
            "singleline",
            "multiline"
        ],
        // Bans "if (!x) { x... }" usage, use "if (x != null)" instead. Note: It does need to be "!=" not "!==" because that case handles both null and undefined values.
        // If this is required please add the null/undefined value as a possible type in the affected type definition.
        // https://palantir.github.io/tslint/rules/no-non-null-assertion/
        "no-non-null-assertion": true,
        // Warns if a type assertion does not change the type of an expression.
        // https://palantir.github.io/tslint/rules/no-unnecessary-type-assertion/
        "no-unnecessary-type-assertion": true,
        // The comma operator easily leads to non-obvious bugs.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator
        // https://palantir.github.io/tslint/rules/ban-comma-operator/
        "ban-comma-operator": true,
        // Bans await on values that aren't Promises. This is usually a sign of programmer error.
        // https://palantir.github.io/tslint/rules/await-promise/
        "await-promise": true,
        // Requires a for ... in statement to be filtered with an if statement.
        // https://palantir.github.io/tslint/rules/forin/
        "forin": true,
        // Disallows iterating over an array with a for-in loop.
        // https://palantir.github.io/tslint/rules/no-for-in-array/
        "no-for-in-array": true,
        // Prevents using the built-in Function constructor.
        // https://palantir.github.io/tslint/rules/function-constructor/
        "function-constructor": true,
        //Disallows eval function invocations.
        // https://palantir.github.io/tslint/rules/no-eval/
        "no-eval": true,
        // Bans use of labels outside of loops/switches
        // https://palantir.github.io/tslint/rules/label-position/
        "label-position": true,
        // Disallows use of arguments.callee. Use named function expressions instead.
        // https://palantir.github.io/tslint/rules/no-arg/
        "no-arg": true,
        // These are almost always a typo, in the rare case where they aren't add tslint:disable-next-line or tslint:disable + tslint:enable.
        // https://palantir.github.io/tslint/rules/no-bitwise/
        "no-bitwise": true,
        // Disallows any type of assignment in conditionals. They are either typos or overfly clever.
        // https://palantir.github.io/tslint/rules/no-conditional-assignment/
        "no-conditional-assignment": false,
        // Disallows access to the constructors of String, Number, and Boolean.
        // https://palantir.github.io/tslint/rules/no-construct/
        "no-construct": true,
        // Disallows debugger statements.
        // https://palantir.github.io/tslint/rules/no-debugger/
        "no-debugger": true,
        // Warns if ‘super()’ appears twice in a constructor. A second call to ‘super()’ will fail at runtime.
        // https://palantir.github.io/tslint/rules/no-duplicate-super/
        "no-duplicate-super": true,
        // Prevents duplicate cases in switch statements.
        // https://palantir.github.io/tslint/rules/no-duplicate-switch-case/
        "no-duplicate-switch-case": true,
        // Bans usage of the delete operator with computed key expressions.
        // https://palantir.github.io/tslint/rules/no-dynamic-delete/
        "no-dynamic-delete": true,
        // Disallows empty blocks. Empty blocks are often indicators of missing code.
        // When necessary add a comment like "/* intentionally left blank */" to inform user developers and isSplitButtonDisabled this rule.
        "no-empty": [
            true,
            "allow-empty-functions"
        ],
        // Warns on use of ${ in non-template strings. If that text should appear add tslint:disable-next-line or tslint:disable + tslint:enable.
        // https://palantir.github.io/tslint/rules/no-invalid-template-strings/
        "no-invalid-template-strings": true,
        // Disallows using the this keyword outside of classes. and In local functions inside methods.
        // https://palantir.github.io/tslint/rules/no-invalid-this/
        "no-invalid-this": [
            true,
            "check-function-in-method"
        ],
        // Forbids an object literal to appear in a type assertion expression. Casting to any or to unknown is still allowed.
        // https://palantir.github.io/tslint/rules/no-object-literal-type-assertion/
        "no-object-literal-type-assertion": true,
        // Warns on apparent attempts to define constructors for interfaces or new for classes.
        // https://palantir.github.io/tslint/rules/no-misused-new/
        "no-misused-new": true,
        // Disallows unnecessary return await. Using return await just adds extra time before the overreaching promise is resolved without changing the semantics.
        // https://palantir.github.io/tslint/rules/no-return-await/
        "no-return-await": true,
        // Disallows shadowing variable declarations.
        // https://palantir.github.io/tslint/rules/no-shadowed-variable/
        "no-shadowed-variable": false,
        // Forbids array literals to contain missing elements. Missing elements are probably an accidentally duplicated comma.
        // https://palantir.github.io/tslint/rules/no-sparse-arrays/
        "no-sparse-arrays": true,
        // Forbids unnecessary string literal property access. Allows obj["prop-erty"], disallows obj["property"].
        // https://palantir.github.io/tslint/rules/no-string-literal/
        "no-string-literal": true,
        // Flags throwing plain strings or concatenations of strings.
        // https://palantir.github.io/tslint/rules/no-string-throw/
        "no-string-throw": true,
        // Disallows falling through case statements.
        // https://palantir.github.io/tslint/rules/no-switch-case-fall-through/
        "no-switch-case-fall-through": true,
        // Disallows unnecessary references to this.
        // https://palantir.github.io/tslint/rules/no-this-assignment/
        "no-this-assignment": [
            true,
            {
                "allow-destructuring": true
            }
        ],
        // Disallows control flow statements, such as return, continue, break and throws in finally blocks.
        // https://palantir.github.io/tslint/rules/no-unsafe-finally/
        "no-unsafe-finally": true,
        // Disallows usage of the var keyword. Use let or const instead.
        // https://palantir.github.io/tslint/rules/no-var-keyword/
        "no-var-keyword": true,
        // Requires expressions of type void to appear in statement position.
        // https://palantir.github.io/tslint/rules/no-void-expression/
        "no-void-expression": [
            true,
            "ignore-arrow-function-shorthand"
        ],
        // Recommends to use a conditional expression instead of assigning to the same thing in each branch of an if statement.
        // https://palantir.github.io/tslint/rules/prefer-conditional-expression/
        "prefer-conditional-expression": true,
        // Enforces the use of the ES2018 object spread operator over Object.assign() where appropriate.
        // https://palantir.github.io/tslint/rules/prefer-object-spread/
        "prefer-object-spread": true,
        // Requires the radix parameter to be specified when calling parseInt.
        // https://palantir.github.io/tslint/rules/radix/
        "radix": true,
        // Requires === and !== in place of == and !=. Does allow for != null or == null checks.
        // https://palantir.github.io/tslint/rules/triple-equals/
        "triple-equals": [
            true,
            "allow-null-check",
            "allow-undefined-check"
        ],
        // Prevents blank constructors, as they are redundant.
        // https://palantir.github.io/tslint/rules/unnecessary-constructor/
        "unnecessary-constructor": true,
        // Warns if an explicitly specified type argument is the default for that type parameter.
        // https://palantir.github.io/tslint/rules/use-default-type-parameter/
        "use-default-type-parameter": true,
        // Enforces use of the isNaN() function to check for NaN references instead of a comparison to the NaN constant.
        // https://palantir.github.io/tslint/rules/use-isnan/
        "use-isnan": true,
        // Requires parentheses when invoking a constructor via the new keyword.
        // https://palantir.github.io/tslint/rules/new-parens/
        "new-parens": true,
        // Forbids a ‘var’/’let’ statement or destructuring initializer to be initialized to ‘undefined’.
        // https://palantir.github.io/tslint/rules/no-unnecessary-initializer/
        "no-unnecessary-initializer": true,
        // Warns when a namespace qualifier (A.x) is unnecessary.
        // https://palantir.github.io/tslint/rules/no-unnecessary-qualifier/
        "no-unnecessary-qualifier": true,
        // Checks that decimal literals should begin with ‘0.’ instead of just ‘.’, and should not end with a trailing ‘0’.
        // https://palantir.github.io/tslint/rules/number-literal-format/
        "number-literal-format": true,
        // Enforces consistent object literal property quote style.
        // https://palantir.github.io/tslint/rules/object-literal-key-quotes/
        "object-literal-key-quotes": [
            true,
            "as-needed"
        ],
        // Requires that variable declarations use const instead of let and var if possible.
        // https://palantir.github.io/tslint/rules/prefer-const/
        "prefer-const": [
            true,
            {
                "destructuring": "all"
            }
        ],
        // Requires that private variables are marked as readonly if they’re never modified outside of the constructor.
        // https://palantir.github.io/tslint/rules/prefer-readonly/
        "prefer-readonly": false,
        // Enforces single quotes for string literals except when the string contains single quotes.
        // Disallows single line template strings that do not contain ${} interpolation.
        // https://palantir.github.io/tslint/rules/quotemark/
        "quotemark": [
            true,
            "single",
            "avoid-escape",
            "avoid-template"
        ],
        // Prefer return; in void functions and return undefined; in value-returning functions.
        // https://palantir.github.io/tslint/rules/return-undefined/
        "return-undefined": true,
        // Enforces consistent semicolon usage at the end of every statement.
        // https://palantir.github.io/tslint/rules/semicolon/
        "semicolon": [
            true,
            "always"
        ],
        // Checks that type literal members are separated by semicolons. Enforces a trailing semicolon for multiline type literals.
        // https://palantir.github.io/tslint/rules/type-literal-delimiter/
        "type-literal-delimiter": true,
        // Disallows keywords as variable names to prevent confusing code.
        // https://palantir.github.io/tslint/rules/variable-name/
        "variable-name": [
            true,
            "ban-keywords"
        ],
        /***********************************************************
         *                                                         *
         *           Microsoft Contributors TSLint Rules           *
         *  https://github.com/Microsoft/tslint-microsoft-contrib  *
         ***********************************************************/

        // Bans the use of caller, callee, eval and arguments.
        "no-banned-terms": true,
        // Bans use of conditions with expressions that evaluate to a constant.
        "no-constant-condition": true,
        // Bans the use of control characters in regular expressions, almost always a mistake.
        "no-control-regex": true,
        // Prevents using the delete keyword on expressions, it should only be used on object properties.
        "no-delete-expression": true,
        // Prevents calls to the regex constructor with strings containing invalid regular expressions.
        "no-invalid-regexp": true,
        // Bans use of numeric literals in octal base. (e.g. 042).
        "no-octal-literal": true,
        // Prefer <type> casts over "as type" assertions.
        "prefer-type-cast": false,
        // Prevents creation of promises that do not complete.
        "promise-must-complete": true,
        /***********************************************************
         *                                                         *
         *                  vrsource TSLint Rules                  *
         *    https://github.com/vrsource/vrsource-tslint-rules    *
         ***********************************************************/

        // Enforces the guidelines casing rules as far as possible.
        // Does not ban privates with leading underscore that don't have a getter/setter.
        // This would require a custom rule to be created.
        "ext-variable-name": [
            true, [
                "class",
                "pascal"
            ],
            [
                "interface",
                "pascal"
            ],
            [
                "function",
                "local",
                "camel"
            ],
            [
                "function",
                "pascal"
            ],
            [
                "parameter",
                "camel"
            ],
            [
                "method",
                "camel"
            ],
            [
                "variable",
                "local",
                "camel"
            ],
            [
                "variable",
                "const",
                "local",
                "camel"
            ],
            [
                "variable",
                "const",
                {
                    "regex": "^\\w+$"
                }
            ],
            // class properties (get, set)
            [
                "property",
                "private",
                "camel",
                "allow-leading-underscore"
            ],
            [
                "property",
                "static",
                "public",
                "upper"
            ],
            [
                "property",
                "camel"
            ],
            // class fields
            [
                "variable",
                "private",
                "camel",
                "allow-leading-underscore"
            ],
            [
                "variable",
                "protected",
                "camel",
                "allow-leading-underscore"
            ],
            [
                "variable",
                "public",
                "camel"
            ],
            // static class fields
            [
                "variable",
                "static",
                "private",
                "camel",
                "allow-leading-underscore"
            ],
            [
                "variable",
                "static",
                "const",
                "upper"
            ],
            [
                "variable",
                "static",
                "public",
                "camel",
                {
                    "regex": "(?!x)x"
                }
            ],
            // forbid use of non-constant public static fields
            // class methods
            // variables and functions
            [
                "default",
                "camel"
            ]
        ],
        /***********************************************************
         *                                                         *
         *          Quality metrics for maintainability            *
         *                                                         *
         ***********************************************************/

        // Enforces a threshold of cyclomatic complexity.
        // https://palantir.github.io/tslint/rules/cyclomatic-complexity/
        "cyclomatic-complexity": [
            true,
            20
        ],
        // A file may not contain more than the specified number of classes.
        // https://palantir.github.io/tslint/rules/max-classes-per-file/
        "max-classes-per-file": [
            true,
            1
        ],
        // Requires lines to be under a certain max length.
        // https://palantir.github.io/tslint/rules/max-line-length/
        "max-line-length": [
            true,
            140
        ],
        "max-func-body-length": [
            true,
            {
                "func-body-length": 100,
                "func-expression-body-length": 100,
                "arrow-body-length": 20,
                "method-body-length": 100,
                "ctor-body-length": 100
            }
        ],
        "max-params": [
            true,
            5
        ],
        "member-ordering": [true, {
            "order": [
                "public-static-field",
                "public-static-method",
                "protected-static-field",
                "protected-static-method",
                "private-static-field",
                "private-static-method",
                "public-instance-field",
                "protected-instance-field",
                "private-instance-field",
                "public-constructor",
                "protected-constructor",
                "private-constructor",
                "public-instance-method",
                "protected-instance-method",
                "private-instance-method"
            ],
            "alphabetize": false
        }],
        /***********************************************************
         *                                                         *
         *           RxJS specific rules                           *
         *                                                         *
         ***********************************************************/
        "rxjs-no-unsafe-takeuntil": true
    }
}
